# Creates a release using compose.py from https://github.com/CleverRaven/Cataclysm-DDA
#
# This action is runs at 12:00 UTC Sunday

name: Make Release
concurrency: release
on:
  schedule:
    - cron: '0 12 * * sun'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      timestamp: ${{ steps.get-timestamp.outputs.time }}
      release_already_exists: ${{ steps.tag_check.outputs.exists }}
    steps:
      - name: Get build timestamp
        id: get-timestamp
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD'
      - name: Generate environmental variables
        id: generate_env_vars
        run: |
          echo "::set-output name=tag_name::${{ steps.get-timestamp.outputs.time }}"
          echo "::set-output name=release_name::Tilesets Release ${{ steps.get-timestamp.outputs.time }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check if there is existing git tag
        id: tag_check
        uses: mukunku/tag-exists-action@v1.0.0
        with:
          tag: ${{ steps.generate_env_vars.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Previous tag
        id: previous_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
      - name: Abort if there are no changes
        run: |
          # exit 1 if there are no changes, exit 0 if there are changes
          git diff ${{ steps.previous_tag.outputs.tag }} | grep ""
      - name: Push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        if: ${{ steps.tag_check.outputs.exists == 'false' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.generate_env_vars.outputs.tag_name }}
          tag_prefix: ""
      - name: "Generate release notes"
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/I-am-Erk/CDDA-Tilesets/releases/generate-notes \
            -f tag_name='${{ steps.generate_env_vars.outputs.tag_name }}' \
            -f target_commitish='master' \
            -q .body > CHANGELOG.md
      - name: Create release
        id: create_release
        uses: actions/create-release@main
        if: ${{ steps.tag_check.outputs.exists == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_env_vars.outputs.tag_name }}
          release_name: ${{ steps.generate_env_vars.outputs.release_name }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false

  builds:
    needs: release
    if: ${{ needs.release.outputs.release_already_exists == 'false' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Altica
            artifact: Altica
            tileset_dir: gfx/Altica
            compose_args: --use-all --obsolete-fillers --format-json
          - name: BrownLikeBears
            artifact: BrownLikeBears
            tileset_dir: gfx/BrownLikeBears
            compose_args: --use-all --obsolete-fillers --format-json
          - name: ChibiUltica
            artifact: ChibiUltica
            tileset_dir: gfx/Chibi_Ultica
            compose_args: --use-all --format-json
          - name: HollowMoon
            artifact: HollowMoon
            tileset_dir: gfx/HollowMoon
            compose_args: --use-all --obsolete-fillers --format-json
          - name: Larwick_Overmap
            artifact: Larwick_Overmap
            tileset_dir: gfx/Larwick_Overmap
            compose_args: --use-all --format-json
          - name: MShockXotto+
            artifact: MshockXotto+
            tileset_dir: gfx/MShockXotto+
            compose_args: --use-all --format-json
          - name: NeoDays
            artifact: NeoDaysTileset
            tileset_dir: gfx/NeoDays
            compose_args: --use-all --format-json
          - name: Retrodays
            artifact: RetroDaysTileset
            tileset_dir: gfx/Retrodays
            compose_args: --use-all --format-json
          - name: SurveyorsMap
            artifact: SurveyorsMap
            tileset_dir: gfx/SurveyorsMap
            compose_args: --use-all --format-json
          - name: UltimateCataclysm
            artifact: UltimateCataclysm
            tileset_dir: gfx/UltimateCataclysm
            compose_args: --use-all --obsolete-fillers --format-json
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl python3 python3-pip libvips42

        # re-installing libvips; caching it won't set it up the way we need it
        # still cache it because we'll make it work somehow
      - run: sudo apt-get install libvips42
      - run: pip3 install pyvips

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build
        id: build
        run: |
          wget https://raw.githubusercontent.com/CleverRaven/Cataclysm-DDA/master/tools/gfx_tools/compose.py \
          || echo "Error: Failed to get compose.py"

          mkdir build
          python3 compose.py ${{matrix.compose_args}} --feedback CONCISE --loglevel INFO "${{matrix.tileset_dir}}" build

          release_name=${{matrix.artifact}}
          mkdir $release_name

          cp -r build/*                          $release_name
          mv ${{matrix.tileset_dir}}/tileset.txt $release_name
          [ -f "${{matrix.tileset_dir}}/fallback.png" ] && mv "${{matrix.tileset_dir}}/fallback.png" $release_name
          [ -f "${{matrix.tileset_dir}}/layering.json" ] && mv "${{matrix.tileset_dir}}/layering.json" $release_name

          zip -r $release_name.zip $release_name

          echo ::set-output name=release_name::$release_name

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.release_name }}.zip
          asset_name: ${{ steps.build.outputs.release_name }}.zip
          asset_content_type: application/zip
